/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "i2c-lcd.h"
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

#define _GPRMC_  1
#define _GPGGA_  2
#define _OTHER_  3
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int GPRMC_ok = 0, GPGGA_ok = 0;
uint8_t char_number = 0, SentenceType = 0, Term;
char sentence[6], rawTime[11], rawDate[7], rawSpeed[6], rawCourse[6], rawSatellites[3],
     rawLatitude[13], rawLongitude[13], rawAltitude[7], buffer[12];

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
char RX_data[2]; //doc du lieu ngat tu gps, uart1


/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
float Latitude();
float Longitude();
float parse_rawDegree(char *term_);
int GPSRead();
void Sent_SMS();
int Check_Face();
uint16_t Traffic_sign();


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//unsigned char DATA1[17]; //lcd line 1
unsigned char DATA2[17]; //lcd line 2
float kdo,vdo; //gps 

uint16_t speed_traffic = 0;
uint16_t vong=0;
uint32_t time;	//luu gia tri hall_getick
float vong_per_s = 0, real_speed = 0;
int route=0;
int Co_ngat = 0,hienthi=0; //co ngat
float test_vt,tg;
const int R = 10;

///////////////
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART1 )
	{
		GPSRead();
		kdo = Latitude();
		vdo = Longitude();
		HAL_UART_Receive_IT(&huart1,(uint8_t*)RX_data,1);
	}
}
////////// 2 ngat ngoai

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == GPIO_PIN_0)
	{
		
		vong++;
		for(int x =150000;x>0;x--)
		{
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
			HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
		}
		if(Co_ngat == 0)
		{
			time = HAL_GetTick();
			Co_ngat = 1;
		}
		else
		{
			tg = HAL_GetTick()-time;
			time = HAL_GetTick();
		}
		//
		
		//
	}
		else
	{
		hienthi++;
		for(int y =40000;y>0;y--);
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
		HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
		if(hienthi>2)
		{
			hienthi=0;
		}
	}
	
}

//////////////////////




/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
	
	printf("AT\r\n ");//khoi tao cho module SIM
	printf("AT+IPR=9600\r\n");
	
	//KHOI TAO LED VA LOA
	HAL_GPIO_WritePin(LOA_GPIO_Port,LOA_Pin,0); //CO DINH LOA
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0); // led
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,0); // led
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,0); // led
	
	
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
	lcd_init();
	
	
	HAL_UART_Receive_IT(&huart1,(uint8_t*)RX_data,1);
	
	lcd_goto_XY(1,0);
	lcd_send_string("HELLO");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		//
		/*
		lcd_goto_XY(1,0);
		sprintf(DATA1,"%.6f ",kdo);
		lcd_send_string(DATA1);
		lcd_goto_XY(2,0);
		sprintf(DATA2,"%.6f ",vdo);
		lcd_send_string(DATA2);
		*/
		
		//Che do hien thi hang hang 2
		if(hienthi==0)
		{
			vong_per_s = tg/1000;
			lcd_goto_XY(2,0);
			sprintf(DATA2,"vong/s: %f  s ",vong_per_s); //chia cho 1000 de dc so s
			lcd_send_string(DATA2);
		}
		else if(hienthi==1)
		{
			route = vong*(2*3.14*R);
			lcd_goto_XY(2,0);
			sprintf(DATA2,"route: %d   m",route); //vong*chu vi
			lcd_send_string(DATA2);
		}
		else
		{
			real_speed = (tg/1000)*(2*3.14*R)*3.6;
			lcd_goto_XY(2,0);
			sprintf(DATA2,"speed: %f   km/h ",(float)((tg/1000)*(2*3.14*R)*3.6));
			lcd_send_string(DATA2);
		}
		//
		speed_traffic = Traffic_sign();
		if(real_speed > speed_traffic){
			HAL_GPIO_WritePin(LOA_GPIO_Port,LOA_Pin,1);
		}
		else{
			HAL_GPIO_WritePin(LOA_GPIO_Port,LOA_Pin,0);
		}
			
		
		
		//101 sent message
		if(HAL_GPIO_ReadPin(PI2_11_GPIO_Port,PI2_11_Pin) ==1 && HAL_GPIO_ReadPin(PI2_13_GPIO_Port,PI2_13_Pin) == 0 && HAL_GPIO_ReadPin(PI2_15_GPIO_Port,PI2_15_Pin) == 1){
			Sent_SMS();
			HAL_GPIO_WritePin(LOA_GPIO_Port,LOA_Pin,1);
		}
		else{
			HAL_GPIO_WritePin(LOA_GPIO_Port,LOA_Pin,0);
		}
		//
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
}
	


//HAM printf se truyen cho uart2
_ARMABI int fputc(int c, FILE * stream ){
		HAL_UART_Transmit(&huart2,(uint8_t *)&c,1,100);
		return 0;
}
////////////////////
void Sent_SMS(){
	printf("AT+CMGF=1\r\n");
	HAL_Delay(1000);
	printf("AT+CMGS=\"0333467946\"\r\n");
	HAL_Delay(1000);
	printf("Warning: https://www.google.com/maps/place/%.6f,%.6f",kdo,vdo);
	putchar(0x1A);
	printf("\n");
	HAL_Delay(1000);
}
////////////////////HAL_GPIO_ReadPin(PI2_13_GPIO_Port,PI2_13_Pin) == 1

///////////////////////
uint16_t Traffic_sign()
{
	uint16_t a;
	if( HAL_GPIO_ReadPin(PI1_11_GPIO_Port,PI1_11_Pin) == 0 && HAL_GPIO_ReadPin(PI1_13_GPIO_Port,PI1_13_Pin) == 0 && HAL_GPIO_ReadPin(PI1_15_GPIO_Port,PI1_15_Pin)==1)
	{
		//nhan bien bao 20km/h
		lcd_goto_XY(1,0);
		lcd_send_string(" 20 KM/H");
		a = 20;
		return a;		
	}
	else if( HAL_GPIO_ReadPin(PI1_11_GPIO_Port,PI1_11_Pin) == 0 && HAL_GPIO_ReadPin(PI1_13_GPIO_Port,PI1_13_Pin) == 1 && HAL_GPIO_ReadPin(PI1_15_GPIO_Port,PI1_15_Pin)==0)
	{
		lcd_goto_XY(1,0);
		lcd_send_string(" 50 KM/H");
		a = 50;
		return a;
	}
	else if( HAL_GPIO_ReadPin(PI1_11_GPIO_Port,PI1_11_Pin) == 0 && HAL_GPIO_ReadPin(PI1_13_GPIO_Port,PI1_13_Pin) == 1 && HAL_GPIO_ReadPin(PI1_15_GPIO_Port,PI1_15_Pin)==1)
	{
		lcd_goto_XY(1,0);
		lcd_send_string(" 70 KM/H");
		a = 70;
		return a;
	}
	else if( HAL_GPIO_ReadPin(PI1_11_GPIO_Port,PI1_11_Pin) == 1 && HAL_GPIO_ReadPin(PI1_13_GPIO_Port,PI1_13_Pin) == 0 && HAL_GPIO_ReadPin(PI1_15_GPIO_Port,PI1_15_Pin)==0)
	{
		lcd_goto_XY(1,0);
		lcd_send_string("100 KM/H");
		a = 100;
		return a;
	}
	else if( HAL_GPIO_ReadPin(PI1_11_GPIO_Port,PI1_11_Pin) == 1 && HAL_GPIO_ReadPin(PI1_13_GPIO_Port,PI1_13_Pin) == 0 && HAL_GPIO_ReadPin(PI1_15_GPIO_Port,PI1_15_Pin)==1)
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,1);
		HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,1);
		HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,0);
		//THANG OR PHAI
	}
	else if( HAL_GPIO_ReadPin(PI1_11_GPIO_Port,PI1_11_Pin) == 1 && HAL_GPIO_ReadPin(PI1_13_GPIO_Port,PI1_13_Pin) == 1 && HAL_GPIO_ReadPin(PI1_15_GPIO_Port,PI1_15_Pin)==0)
	{
		//CHI DI THANG
		HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,1);
		HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,0);
		HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,0);
	}
}
  /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PI1_15_Pin PI1_13_Pin */
  GPIO_InitStruct.Pin = PI1_15_Pin|PI1_13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PI1_11_Pin PI1_7_Pin */
  GPIO_InitStruct.Pin = PI1_11_Pin|PI1_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : HALL_EXT0_Pin BUT_EXT1_Pin */
  GPIO_InitStruct.Pin = HALL_EXT0_Pin|BUT_EXT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PI2_11_Pin PI2_13_Pin PI2_15_Pin */
  GPIO_InitStruct.Pin = PI2_11_Pin|PI2_13_Pin|PI2_15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : LOA_Pin */
  GPIO_InitStruct.Pin = LOA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LOA_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

}

/* USER CODE BEGIN 4 */
void stringcpy(char *str1, char *str2, int dir) {
  uint8_t chr = 0;
  do {
    str2[chr + dir] = str1[chr];
  } while(str1[chr++] != '\0');
};

int GPSRead(){
		switch((uint8_t)RX_data[0]) {
    case '\r' :  // sentence end
      if(SentenceType == _GPRMC_)
        GPRMC_ok = 1;
      if(SentenceType == _GPGGA_)
        GPGGA_ok = 1;
      if(GPRMC_ok && GPGGA_ok) {
        GPRMC_ok = GPGGA_ok = 0;
        return 1;
      }
			break;
		case '$' : // sentence start
      Term = char_number = 0;
      break;
		case ',' :  // term end (new term start)
      buffer[char_number] = '\0';
      if(Term == 0) {
        stringcpy(buffer, sentence,0);
        if(strcmp(sentence, "GPRMC") == 0)
          SentenceType = _GPRMC_;
        else if(strcmp(sentence, "GPGGA") == 0)
               SentenceType = _GPGGA_;
             else
               SentenceType = _OTHER_;
      }
			if(Term == 1 && SentenceType == _GPRMC_) {
        stringcpy(buffer, rawTime,0);
      }

      // Latitude
      if((Term == 3) && (SentenceType == _GPRMC_)) {
        stringcpy(buffer, rawLatitude, 1);
      }
      // Latitude N/S
      if((Term == 4) && (SentenceType == _GPRMC_)) {
        if(buffer[0] == 'N')
          rawLatitude[0] = '0';
        else
          rawLatitude[0] = '-';
      }

      // Longitude
      if((Term == 5) && (SentenceType == _GPRMC_)) {
        stringcpy(buffer, rawLongitude, 1);
      }
      // Longitude E/W
      if((Term == 6) && (SentenceType == _GPRMC_)) {
        if(buffer[0] == 'E')
          rawLongitude[0] = '0';
        else
          rawLongitude[0] = '-';
      }

      // Speed
      if((Term == 7) && (SentenceType == _GPRMC_)) {
        stringcpy(buffer, rawSpeed,0);
      }

      // Course
      if((Term == 8) && (SentenceType == _GPRMC_)) {
        stringcpy(buffer, rawCourse,0);
      }

      // Date
      if(Term == 9 && SentenceType == _GPRMC_) {
        stringcpy(buffer, rawDate,0);
      }

      // Satellites
      if((Term == 7) && (SentenceType == _GPGGA_)) {
        stringcpy(buffer, rawSatellites,0);
      }

      // Altitude
      if((Term == 9) && (SentenceType == _GPGGA_)) {
        stringcpy(buffer, rawAltitude,0);
      }
      Term++;
      char_number = 0;
      break;

    default:
      buffer[char_number++] = RX_data[0];
      break;
  }
	return 0;
}

float parse_rawDegree(char *term_) {
  float term_value = atof(term_)/100;
  int16_t term_dec = term_value;
  term_value -= term_dec;
  term_value  = term_value * 5/3 + term_dec;
  return term_value;
}

float Latitude() {
  return parse_rawDegree(rawLatitude);
}

float Longitude() {
  return parse_rawDegree(rawLongitude);
}

float Altitude() {
  return atof(rawAltitude);
}

uint8_t Satellites() {
  return atoi(rawSatellites);
}

float Speed() {
  return (atof(rawSpeed) * 1.852);
}

float Course() {
  return atof(rawCourse);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
